#include<iostream>

#include <iterator> 
#include <map> 
#include<queue>
using namespace std;
#include <chrono> 
using namespace std::chrono; 
const int MAX_SIZE = 5; //max number of pivots and msg in buffer

struct msg
{
	int value;
	int opcode;
};

struct node
{
	map<int, msg> buffer; 

	map<int, node*> pivotmap;
};

void display(node *root) //display pivots, buffer from each node
{
	queue<node*> g;
	g.push(root);
	while (!g.empty()) {
		node *n = g.front();
		g.pop();
		cout<<"PIVOTS :";
		map<int, node*> ::iterator itr; 
		for (itr = n->pivotmap.begin(); itr != n->pivotmap.end();itr++) { 
			cout<<itr->first<<"  ";//print pivot pointers
			g.push(itr->second);
		}

		cout<<"BUFFER :";
		map<int, msg> ::iterator itr2; 
		for (itr2 = n->buffer.begin(); itr2 != n->buffer.end();itr2++) { 
			//print key , valye opcode
			cout<<itr2->first<<"  ";
			cout<<itr2->second.value<<"  "<<itr2->second.opcode<<",";
		}
		cout<<endl;

	}
	cout << '\n';
}
void delete_key(node* root,int key){
	root->buffer.erase(key);
	//cout<<root->buffer.size()<<"  "<<root->pivotmap.size();
	if(root->buffer.size() == 0 && root->pivotmap.size() ==0)
	{
		root =NULL;
		delete root;
	}


}

map<int, node*> split(node *root)
{
	map<int, node*> result;
	map<int, node*> ::iterator itr; 

	int pivcount = root->pivotmap.size();
	for (itr = root->pivotmap.begin(); itr != root->pivotmap.end();) { 
		node *n = new node;
		result[itr->first]= n;

		for(int i=0;i<=pivcount/2 &&  itr != root->pivotmap.end();i++)
		{
			n->pivotmap[itr->first]=itr->second;
			itr++;
		}

	}
	root->pivotmap.clear();

	//distribute buffer of root to created children
	if(root->buffer.size() != 0)
	{
		map<int, msg> ::iterator itr2=root->buffer.begin(); 
		itr = result.begin();
		if(itr2->first < itr->first)
		{
			result[itr2->first] = itr->second;
			result.erase(itr->first);
		}
		int prev = itr->first;
		itr++;
		for(;itr2 !=root->buffer.end() && itr!=result.end();itr++)
		{
			while(itr2 !=root->buffer.end() && itr2->first<itr->first)
			{
				result[prev]->buffer[itr2->first] =itr2->second; 
				itr2++;
			}
			prev = itr->first;
		}
		while(itr2 !=root->buffer.end())
		{
			result[prev]->buffer[itr2->first] =itr2->second;
			itr2++;
		}
	}
	return result;
}

map<int, node*> flush(node *root)
{
	map<int, node*> result;
	if(root->pivotmap.size() == 0) //if root buffer full and it is leaf node :create pivots, distribute msgs between created pivots
	{
		map<int, msg>::iterator itr; 

		for (itr = root->buffer.begin(); itr != root->buffer.end();) { 
			node *n = new node;
			result[itr->first]= n;
			for(int i=0;i<2 && itr != root->buffer.end();i++)
			{
				n->buffer[itr->first] = itr->second;
				itr++;
			}

		}
		root->buffer.clear();

		//return result;

	}
	else 
	{
		//find one child and flush msg s. ::later to find situable child ,we can add timestamp  so that we can flush buffer to most idle child
		
		//edit first child if required
		int min_piv_1 = root->pivotmap.begin()->first;
		int min_buff = root->buffer.begin()->first;
		if(min_buff < min_piv_1)
		{
			root->pivotmap[min_buff]= root->pivotmap.begin()->second;
			root->pivotmap.erase(min_piv_1);
		}

		//find appropriate children to flush
		map<int, node*> ::iterator itr; 
		map<int, msg>::iterator itr2; 
		int max=0,piv=0;
		itr = root->pivotmap.begin();
		int prev = itr->first;
		itr++;

		for (itr2 =  root->buffer.begin(); itr != root->pivotmap.end() && itr2!= root->buffer.end();itr++) { 
			int temp=0;
			while(itr2!= root->buffer.end()  && itr2->first < itr->first )
			{
				itr2++;
				temp++;

			}
			if(max<temp)
			{
				max = temp;
				piv = prev;

			}
			prev = itr->first;
		}

		int temp=0;
		while(itr2!= root->buffer.end())
		{
			temp++;
			itr2++;
		}
		if(max<temp)
		{
			max = temp;
			piv = prev;
		}

		//now flush msg to that child: 
		
		int flag_ = 0;
		for (itr2 =  root->buffer.begin(); itr2!= root->buffer.end();itr2++)
		{
			if(itr2->first >= piv)
			{
				for(int i=0;i<max;i++)
				{
					
					//root->pivotmap[piv]->buffer[itr2->first]=itr2->second;
					//delete item or insert based on opcode
					if(itr2->second.opcode == 2){

						if (root->pivotmap[piv]->buffer.find(itr2->first) != root->pivotmap[piv]->buffer.end()) {

							root->pivotmap[piv]->buffer.erase(itr2->first);

							//after delete update pivot pointer of that child as pivot needs to point out first element and if first element is got erases pivot needs to be update
							if(piv == itr2->first)
							{
								flag_ =1;
							}


						} else {
							root->pivotmap[piv]->buffer[itr2->first]=itr2->second;
						}
					}else {
						root->pivotmap[piv]->buffer[itr2->first]=itr2->second;
					}
					//clear or delete that buffer item which got flushed to child pivot
					root->buffer.erase(itr2++);
					

				}
				break;
			}




		}
		
		if(root->pivotmap[piv]->buffer.size() == 0 && root->pivotmap[piv]->pivotmap.size() == 0)
		{
			root->pivotmap[piv] =NULL;
			delete root->pivotmap[piv];

			root->pivotmap.erase(piv);

			//assign first root min of 1st pivotmap and buff

		}else
		{
			int min_piv;
			int  bufff= root->pivotmap[piv]->buffer.begin()->first;
			if(root->pivotmap[piv]->pivotmap.size()!=0)
			{
			int pivf= root->pivotmap[piv]->pivotmap.begin()->first;

			min_piv = pivf<bufff ?pivf:bufff;
			}else
			{
			min_piv = bufff;
			}
			if(piv != min_piv)
			{
			root->pivotmap[min_piv] = root->pivotmap[piv];
			root->pivotmap.erase(piv);
			piv = min_piv;
			}
			

			if(root->pivotmap[piv]->buffer.size() >MAX_SIZE)//if buff exceed size else
			{
				
				//flush messeges
				map<int, node*>result_1=flush(root->pivotmap[piv]);
				//add result to pivot of current 
				map<int, node*> ::iterator itr; 
				for (itr =  result_1.begin(); itr != result_1.end();itr++) { 

					root->pivotmap[itr->first] = itr->second;
				}
				result_1.clear();
				//update pivpointer 
			int min_piv_,bufff_=-1,pivmin=-1;
				if(root->pivotmap[piv]->buffer.size()!=0)
				{
					bufff_ = root->pivotmap[piv]->buffer.begin()->first;
				}
				
				if(root->pivotmap[piv]->pivotmap.size()!=0)
				{
					 pivmin = root->pivotmap[piv]->pivotmap.begin()->first;
					
				}
				if(bufff_==-1)
				{
					min_piv_ = pivmin;
				}else if(pivmin ==-1)
				{
					min_piv_ = bufff_;
				}else
				{
					min_piv_ = pivmin<bufff_ ?pivmin : bufff_;
				}
				
				if(piv != min_piv_)
				{
					root->pivotmap[min_piv_] = root->pivotmap[piv];
					root->pivotmap.erase(piv);
					piv = min_piv_;
				}
				

				//check size exceed if yes =>Split
				if(root->pivotmap.size() >MAX_SIZE)
				{
					return split(root);
				}


			}
		}




	}
	//Improvement:merging: at every step check if some nodes are mergable to balance tree since we are deleting some element 
	int flag =0;
	for(auto itr = root->pivotmap.begin();itr!=root->pivotmap.end();itr++)
	{
		if(itr->second->pivotmap.size()!=0 && itr->second->pivotmap.size()<2)//if pivot is not empty but less than MAX_SIZE/2 i.e. it is imbalanced
		{ flag=1;
		break;
		}
	}
	if(flag ==1 )//merging 
	{
		map<int, node*> result_2;
		map<int, msg> temp_buff;
		for(auto itr = root->pivotmap.begin();itr!=root->pivotmap.end();itr++)
		{
			result_2.insert(itr->second->pivotmap.begin(),itr->second->pivotmap.end());
			temp_buff.insert(itr->second->buffer.begin(),itr->second->buffer.end());
		}
		root->pivotmap.clear();
		root->buffer.insert(temp_buff.begin(),temp_buff.end());
		root->pivotmap = result_2;
		if(root->pivotmap.size() > MAX_SIZE)
		{
			root->pivotmap = split(root);
		}
		if(root->buffer.size() > MAX_SIZE)
		{
			map<int, node*> result_3 = flush(root);
			if(result_3.size()!=0)
			{
				root->pivotmap.insert(result_3.begin(), result_3.end());
				if(root->pivotmap.size() > MAX_SIZE)
				{
					root->pivotmap = split(root);
				}
			}
		}
	}

	return result;
}


node* insert(node *root,int key,int value, int opcode)
{
	if(root == NULL) //if tree is empty create new node
	{
		root = new node;
		msg m;
		m.value = value;
		m.opcode =opcode;

		root->buffer[key]=m;
		//root->pivotmap.insert(pair<int, node*>(2,temp));
		return root;
	}else
	{
		msg m;
		m.value = value;
		m.opcode =opcode;
		if(opcode == 2)//opcode ==2 :delete the key
		{

			if (root->buffer.find(key) != root->buffer.end())//if key is present delete the key, value
			{

				//delete that key delete()
				//delete_key(root,key);

				root->buffer.erase(key);
				//cout<<root->buffer.size()<<"  "<<root->pivotmap.size();
				if(root->buffer.size() == 0 && root->pivotmap.size() ==0) //after deleting key, if node becomes empty :delete node
				{
					root =NULL;
					delete root;
				}
			} else {
				root->buffer[key]=m;
			}
		}else {
			root->buffer[key]=m;
			/*if(root->pivotmap.size()!=0)
			{
				int min = root->pivotmap.begin()->first;
				if(min > key)
				{
					root->pivotmap[key]=root->pivotmap[min];
					root->pivotmap.erase(min);
				}
			}*/


		}


	}
	if(root->buffer.size()> MAX_SIZE) //if buffer size exceeds the maxsize=>flush msgs
	{
		// create new node/root and add pivot if result !=NULL

		map<int, node*>result=flush(root);
		if(result.size() != 0)
		{
			root = new node;
			root->pivotmap = result;
		}


	}
	return root;
}


int searchKey(node *root,int key) //return -1:if key not found else return value
{
	if(root==NULL)
	{
		cout<<"Key Not present"<<endl;
		return -1;
	}
	else
	{
		map<int, msg> ::iterator itr = root->buffer.find(key);
		if (itr!= root->buffer.end())//serarch in buffer 
		{
			//cout<<itr->second.value<<"\n";
			if(itr->second.opcode == 2)
			{
				return -1;
			}else
			{
				return itr->second.value;
			}
		}else //look for appropriate child pointer to search the key
		{

			map<int, node*> ::iterator itr; 
			node *children_pivot = NULL; 
			for (itr = root->pivotmap.begin(); itr != root->pivotmap.end();itr++) { 

				if(itr->first > key)
				{
					break;
				}
				children_pivot = itr->second;
			}
			if(children_pivot == NULL)
			{
				return -1;
			}
			return searchKey( children_pivot, key);
		}

	}
}



int main()
{

	node *root = NULL;
	//some test cases:
	//int arr[27][3]={{12,6,0},{13,13,0},{60,7,0},{50,5,0},{33,5,0},{40,7,0},{47,5,0},{70,8,0},{15,5,0},{18,8,0},{20,2,0},{12,6,2},{13,13,2},{15,5,2},{50,5,2},{33,5,2},{40,7,2},{47,5,2},{70,8,2},{18,8,2},{20,2,2},{89,2,0},{30,2,0},{63,2,0},{100,2,0},{49,8,0},{21,3,0}};
	//int arr[40][3]={{12,6,0},{13,13,0},{60,7,0},{50,5,0},{33,5,0},{40,7,0},{47,5,0},{70,8,0},{15,5,0},{18,8,0},{20,2,0},{12,6,2},{13,13,2},{15,5,2},{50,5,2},{33,5,2},{40,7,2},{47,5,2},{70,8,2},{18,8,2},{20,2,2},{89,2,0},{30,2,0},{63,2,0},{100,2,0},{49,8,0},{21,3,0},{54,54,0},{300,300,0},{104,5,0},{78,6,0},{73,0,0},{90,0,0},{144,4,0},{76,6,0},{88,9,0},{67,9,0},{44,4,0},{33,3,0},{2,0,0}};

	//int arr[500][3]={{26033,0,0},{7957,0,0},{12877,0,0},{8363,0,0},{27380,0,0},{25506,0,0},{27626,0,0},{20808,0,0},{26367,0,0},{21273,0,0},{19195,0,0},{8951,0,0},{16268,0,0},{4577,0,0},{8600,0,0},{8573,0,0},{2845,0,0},{28416,0,0},{2817,0,0},{8751,0,0},{5253,0,0},{27023,0,0},{11068,0,0},{5381,0,0},{14251,0,0},{10859,0,0},{4608,0,0},{27631,0,0},{31627,0,0},{17966,0,0},{17618,0,0},{3180,0,0},{3453,0,0},{23390,0,0},{13422,0,0},{32600,0,0},{442,0,0},{24804,0,0},{8552,0,0},{21253,0,0},{32028,0,0},{14527,0,0},{13331,0,0},{25486,0,0},{11301,0,0},{23289,0,0},{19362,0,0},{32104,0,0},{11075,0,0},{11482,0,0},{18573,0,0},{3642,0,0},{17490,0,0},{22621,0,0},{22071,0,0},{22511,0,0},{9571,0,0},{14304,0,0},{30669,0,0},{23049,0,0},{29884,0,0},{10783,0,0},{23665,0,0},{25912,0,0},{26144,0,0},{25187,0,0},{16024,0,0},{3371,0,0},{13648,0,0},{2295,0,0},{21168,0,0},{27814,0,0},{10705,0,0},{16348,0,0},{2311,0,0},{28629,0,0},{2032,0,0},{24509,0,0},{9960,0,0},{6368,0,0},{4868,0,0},{293,0,0},{31495,0,0},{29375,0,0},{1267,0,0},{9712,0,0},{12574,0,0},{9808,0,0},{7927,0,0},{5888,0,0},{2265,0,0},{26022,0,0},{14242,0,0},{18993,0,0},{29680,0,0},{8612,0,0},{27168,0,0},{25742,0,0},{24466,0,0},{15819,0,0},{19133,0,0},{11461,0,0},{11530,0,0},{13905,0,0},{17574,0,0},{472,0,0},{7581,0,0},{27763,0,0},{1268,0,0},{10774,0,0},{13745,0,0},{3340,0,0},{5862,0,0},{3658,0,0},{23349,0,0},{17765,0,0},{5486,0,0},{13618,0,0},{13116,0,0},{14927,0,0},{5616,0,0},{4914,0,0},{747,0,0},{30063,0,0},{12358,0,0},{586,0,0},{6038,0,0},{15578,0,0},{18439,0,0},{30278,0,0},{31270,0,0},{2274,0,0},{31497,0,0},{16692,0,0},{29118,0,0},{3119,0,0},{22820,0,0},{31771,0,0},{6558,0,0},{529,0,0},{18745,0,0},{26602,0,0},{3655,0,0},{14100,0,0},{16243,0,0},{23215,0,0},{30175,0,0},{32725,0,0},{10445,0,0},{3337,0,0},{26584,0,0},{4629,0,0},{12245,0,0},{23520,0,0},{30669,0,0},{29708,0,0},{16047,0,0},{21075,0,0},{26540,0,0},{30207,0,0},{25180,0,0},{4082,0,0},{17690,0,0},{27157,0,0},{29501,0,0},{24366,0,0},{30227,0,0},{3687,0,0},{9938,0,0},{4109,0,0},{30929,0,0},{23894,0,0},{28360,0,0},{27427,0,0},{23280,0,0},{14369,0,0},{18739,0,0},{20669,0,0},{11215,0,0},{8119,0,0},{26136,0,0},{22623,0,0},{28217,0,0},{28617,0,0},{17966,0,0},{1137,0,0},{19781,0,0},{20516,0,0},{14053,0,0},{24117,0,0},{6266,0,0},{20542,0,0},{20392,0,0},{3580,0,0},{19255,0,0},{24846,0,0},{21599,0,0},{17306,0,0},{9042,0,0},{8481,0,0},{8505,0,0},{791,0,0},{2816,0,0},{12011,0,0},{936,0,0},{10663,0,0},{23029,0,0},{30043,0,0},{9389,0,0},{16092,0,0},{12748,0,0},{9906,0,0},{26709,0,0},{26139,0,0},{31144,0,0},{22932,0,0},{26244,0,0},{1101,0,0},{15644,0,0},{31839,0,0},{24817,0,0},{28118,0,0},{29256,0,0},{4797,0,0},{23154,0,0},{12491,0,0},{27461,0,0},{29045,0,0},{13178,0,0},{20319,0,0},{30404,0,0},{27783,0,0},{28639,0,0},{32415,0,0},{29681,0,0},{11127,0,0},{2529,0,0},{15712,0,0},{23966,0,0},{6121,0,0},{30313,0,0},{22389,0,0},{4253,0,0},{6766,0,0},{16014,0,0},{10533,0,0},{20845,0,0},{6558,0,0},{21085,0,0},{14044,0,0},{21786,0,0},{28519,0,0},{30938,0,0},{27936,0,0},{20830,0,0},{18596,0,0},{322,0,0},{7367,0,0},{22540,0,0},{8945,0,0},{6547,0,0},{1895,0,0},{430,0,0},{23742,0,0},{28238,0,0},{4111,0,0},{11117,0,0},{2979,0,0},{30588,0,0},{25652,0,0},{19506,0,0},{3315,0,0},{5871,0,0},{12526,0,0},{9483,0,0},{1172,0,0},{27594,0,0},{14437,0,0},{20688,0,0},{15886,0,0},{32580,0,0},{23429,0,0},{30470,0,0},{9185,0,0},{11944,0,0},{27642,0,0},{9731,0,0},{16668,0,0},{30368,0,0},{23128,0,0},{6227,0,0},{299,0,0},{948,0,0},{5273,0,0},{26971,0,0},{8689,0,0},{11278,0,0},{10445,0,0},{32060,0,0},{3095,0,0},{13952,0,0},{13,0,0},{8187,0,0},{1443,0,0},{4808,0,0},{17841,0,0},{8158,0,0},{29388,0,0},{26386,0,0},{20163,0,0},{26393,0,0},{6412,0,0},{5822,0,0},{5555,0,0},{22697,0,0},{6264,0,0},{9828,0,0},{7755,0,0},{29825,0,0},{3917,0,0},{8469,0,0},{21990,0,0},{1764,0,0},{7115,0,0},{25316,0,0},{17373,0,0},{26386,0,0},{12358,0,0},{27813,0,0},{7747,0,0},{2342,0,0},{28026,0,0},{9461,0,0},{5842,0,0},{26431,0,0},{30495,0,0},{10875,0,0},{29732,0,0},{1502,0,0},{30397,0,0},{7021,0,0},{19239,0,0},{6031,0,0},{16578,0,0},{30293,0,0},{27851,0,0},{972,0,0},{20434,0,0},{30741,0,0},{23549,0,0},{21790,0,0},{2654,0,0},{6952,0,0},{24537,0,0},{21125,0,0},{1656,0,0},{7212,0,0},{1563,0,0},{18458,0,0},{16357,0,0},{10141,0,0},{10711,0,0},{17139,0,0},{29812,0,0},{5348,0,0},{21099,0,0},{17479,0,0},{6799,0,0},{21136,0,0},{32433,0,0},{12242,0,0},{9744,0,0},{26595,0,0},{12409,0,0},{31099,0,0},{3926,0,0},{12176,0,0},{19510,0,0},{22069,0,0},{20631,0,0},{12227,0,0},{8439,0,0},{29731,0,0},{19831,0,0},{13154,0,0},{11417,0,0},{32255,0,0},{22746,0,0},{2194,0,0},{28731,0,0},{28092,0,0},{19703,0,0},{2174,0,0},{26867,0,0},{29290,0,0},{27055,0,0},{19540,0,0},{191,0,0},{27995,0,0},{27932,0,0},{13199,0,0},{3007,0,0},{19076,0,0},{6764,0,0},{8060,0,0},{9633,0,0},{14373,0,0},{8944,0,0},{2039,0,0},{860,0,0},{429,0,0},{9584,0,0},{19830,0,0},{3361,0,0},{4568,0,0},{14274,0,0},{27722,0,0},{21646,0,0},{24602,0,0},{11930,0,0},{29985,0,0},{15142,0,0},{19776,0,0},{6052,0,0},{28366,0,0},{23806,0,0},{13141,0,0},{6608,0,0},{1357,0,0},{5048,0,0},{11458,0,0},{12270,0,0},{10753,0,0},{9653,0,0},{22202,0,0},{29050,0,0},{2369,0,0},{30087,0,0},{4821,0,0},{23993,0,0},{30995,0,0},{17829,0,0},{3067,0,0},{23813,0,0},{17719,0,0},{25699,0,0},{644,0,0},{27748,0,0},{31848,0,0},{21537,0,0},{9117,0,0},{10080,0,0},{8926,0,0},{17346,0,0},{28654,0,0},{9235,0,0},{28183,0,0},{27488,0,0},{30074,0,0},{21890,0,0},{28119,0,0},{8509,0,0},{24774,0,0},{26668,0,0},{18030,0,0},{15101,0,0},{10557,0,0},{19682,0,0},{24633,0,0},{3859,0,0},{23763,0,0},{26072,0,0},{12395,0,0},{10874,0,0},{20201,0,0},{2557,0,0},{32525,0,0},{3749,0,0},{11888,0,0},{21128,0,0},{20036,0,0},{3000,0,0},{18258,0,0},{26323,0,0},{18131,0,0},{2808,0,0},{29453,0,0},{14957,0,0},{19936,0,0},{23936,0,0},{31905,0,0},{29035,0,0},{10235,0,0},{25399,0,0},{31661,0,0},{24318,0,0},{19804,0,0},{7678,0,0},{27349,0,0},{21067,0,0}};

	int arr[2000][3] ={{15467,0,0},{23754,0,0},{8539,0,0},{20875,0,0},{14979,0,0},{31094,0,0},{23482,0,0},{29061,0,0},{27790,0,0},{12193,0,0},{19858,0,0},{29492,0,0},{9498,0,0},{884,0,0},{14070,0,0},{28849,0,0},{18155,0,0},{31088,0,0},{17395,0,0},{31012,0,0},{10898,0,0},{13746,0,0},{16067,0,0},{18991,0,0},{578,0,0},{8310,0,0},{12867,0,0},{14474,0,0},{12254,0,0},{13275,0,0},{4264,0,0},{3050,0,0},{16726,0,0},{22246,0,0},{12909,0,0},{21032,0,0},{1844,0,0},{27080,0,0},{16783,0,0},{28063,0,0},{31090,0,0},{26468,0,0},{25853,0,0},{25302,0,0},{24207,0,0},{16396,0,0},{16458,0,0},{10591,0,0},{26850,0,0},{20875,0,0},{7078,0,0},{1022,0,0},{15917,0,0},{8297,0,0},{18444,0,0},{9230,0,0},{7541,0,0},{13930,0,0},{5053,0,0},{7201,0,0},{5905,0,0},{19032,0,0},{25324,0,0},{26087,0,0},{2818,0,0},{5378,0,0},{16571,0,0},{32593,0,0},{24962,0,0},{30597,0,0},{31846,0,0},{25333,0,0},{12767,0,0},{22218,0,0},{9918,0,0},{24501,0,0},{19338,0,0},{20560,0,0},{986,0,0},{5019,0,0},{21867,0,0},{11308,0,0},{17673,0,0},{3592,0,0},{30584,0,0},{12366,0,0},{7946,0,0},{23822,0,0},{17030,0,0},{14597,0,0},{4224,0,0},{2586,0,0},{19039,0,0},{15046,0,0},{27808,0,0},{18902,0,0},{9748,0,0},{4393,0,0},{32301,0,0},{25421,0,0},{19093,0,0},{16180,0,0},{22182,0,0},{4689,0,0},{29566,0,0},{1244,0,0},{7614,0,0},{26905,0,0},{3636,0,0},{28105,0,0},{29964,0,0},{29999,0,0},{23345,0,0},{15706,0,0},{17412,0,0},{11146,0,0},{14748,0,0},{23529,0,0},{38,0,0},{24566,0,0},{20765,0,0},{10576,0,0},{17781,0,0},{19389,0,0},{3567,0,0},{22699,0,0},{21291,0,0},{26496,0,0},{9015,0,0},{14688,0,0},{16555,0,0},{7270,0,0},{1940,0,0},{4445,0,0},{32439,0,0},{4217,0,0},{8183,0,0},{27809,0,0},{30947,0,0},{4684,0,0},{3253,0,0},{1534,0,0},{27465,0,0},{26593,0,0},{19674,0,0},{11549,0,0},{16511,0,0},{1227,0,0},{11201,0,0},{19906,0,0},{3014,0,0},{27536,0,0},{11489,0,0},{31825,0,0},{29572,0,0},{15953,0,0},{27114,0,0},{11154,0,0},{8181,0,0},{17069,0,0},{5905,0,0},{28593,0,0},{541,0,0},{23778,0,0},{8615,0,0},{29321,0,0},{1793,0,0},{17973,0,0},{7409,0,0},{32033,0,0},{2838,0,0},{661,0,0},{28980,0,0},{14967,0,0},{8698,0,0},{22907,0,0},{271,0,0},{6013,0,0},{1634,0,0},{22036,0,0},{14605,0,0},{25698,0,0},{18004,0,0},{4770,0,0},{15739,0,0},{6930,0,0},{32662,0,0},{21280,0,0},{10871,0,0},{28416,0,0},{16486,0,0},{13092,0,0},{6730,0,0},{2595,0,0},{24683,0,0},{27402,0,0},{26104,0,0},{6974,0,0},{26092,0,0},{28751,0,0},{21525,0,0},{6501,0,0},{19264,0,0},{30011,0,0},{10713,0,0},{24765,0,0},{14469,0,0},{3011,0,0},{21111,0,0},{3203,0,0},{1429,0,0},{28589,0,0},{4267,0,0},{12880,0,0},{6198,0,0},{15349,0,0},{28306,0,0},{25243,0,0},{29329,0,0},{3952,0,0},{24511,0,0},{4735,0,0},{1510,0,0},{25775,0,0},{18827,0,0},{21182,0,0},{7549,0,0},{8486,0,0},{26028,0,0},{30727,0,0},{30176,0,0},{8077,0,0},{13066,0,0},{6260,0,0},{21575,0,0},{14727,0,0},{26830,0,0},{599,0,0},{12884,0,0},{5250,0,0},{8123,0,0},{4150,0,0},{20992,0,0},{13790,0,0},{9665,0,0},{32276,0,0},{19926,0,0},{8785,0,0},{12239,0,0},{9202,0,0},{31071,0,0},{3210,0,0},{24042,0,0},{14742,0,0},{9693,0,0},{22292,0,0},{17788,0,0},{1931,0,0},{7995,0,0},{28030,0,0},{30190,0,0},{10601,0,0},{30021,0,0},{14521,0,0},{11128,0,0},{17751,0,0},{25877,0,0},{12993,0,0},{9272,0,0},{23757,0,0},{30413,0,0},{23935,0,0},{19330,0,0},{6815,0,0},{9100,0,0},{8431,0,0},{12152,0,0},{16951,0,0},{6042,0,0},{21630,0,0},{29914,0,0},{9249,0,0},{25830,0,0},{30646,0,0},{15647,0,0},{15310,0,0},{14771,0,0},{24092,0,0},{12996,0,0},{23185,0,0},{28558,0,0},{21081,0,0},{12260,0,0},{1006,0,0},{1667,0,0},{29849,0,0},{13065,0,0},{24340,0,0},{24720,0,0},{22577,0,0},{5698,0,0},{25000,0,0},{20826,0,0},{9348,0,0},{15477,0,0},{6084,0,0},{22047,0,0},{15655,0,0},{10487,0,0},{11584,0,0},{2540,0,0},{13635,0,0},{13658,0,0},{7216,0,0},{10768,0,0},{4667,0,0},{22918,0,0},{9389,0,0},{16080,0,0},{8591,0,0},{14859,0,0},{29145,0,0},{15452,0,0},{26113,0,0},{28854,0,0},{4125,0,0},{12290,0,0},{24566,0,0},{17251,0,0},{6325,0,0},{19874,0,0},{13598,0,0},{15633,0,0},{13935,0,0},{29026,0,0},{31575,0,0},{23868,0,0},{26543,0,0},{27042,0,0},{10959,0,0},{20839,0,0},{8631,0,0},{7475,0,0},{31593,0,0},{27896,0,0},{14629,0,0},{25027,0,0},{12643,0,0},{21320,0,0},{13245,0,0},{5788,0,0},{7477,0,0},{2043,0,0},{26473,0,0},{22415,0,0},{21180,0,0},{22925,0,0},{2686,0,0},{23594,0,0},{23447,0,0},{23086,0,0},{6465,0,0},{22322,0,0},{26834,0,0},{23248,0,0},{13482,0,0},{27213,0,0},{18369,0,0},{7294,0,0},{24168,0,0},{510,0,0},{7727,0,0},{11247,0,0},{13860,0,0},{11734,0,0},{12729,0,0},{7003,0,0},{7178,0,0},{18665,0,0},{15988,0,0},{3725,0,0},{23686,0,0},{1664,0,0},{8406,0,0},{19770,0,0},{18763,0,0},{14093,0,0},{22227,0,0},{20369,0,0},{25498,0,0},{22884,0,0},{7238,0,0},{30995,0,0},{31681,0,0},{19495,0,0},{9875,0,0},{30117,0,0},{27106,0,0},{13186,0,0},{17290,0,0},{27875,0,0},{17397,0,0},{26393,0,0},{24463,0,0},{32696,0,0},{13584,0,0},{31807,0,0},{14072,0,0},{17451,0,0},{23014,0,0},{16489,0,0},{14007,0,0},{13180,0,0},{18063,0,0},{14306,0,0},{20537,0,0},{15984,0,0},{6535,0,0},{29888,0,0},{17550,0,0},{31721,0,0},{16376,0,0},{23062,0,0},{10953,0,0},{9657,0,0},{20284,0,0},{8043,0,0},{13738,0,0},{22456,0,0},{6045,0,0},{10347,0,0},{31866,0,0},{17685,0,0},{21600,0,0},{1245,0,0},{19255,0,0},{22505,0,0},{7427,0,0},{11477,0,0},{15857,0,0},{28434,0,0},{31682,0,0},{19755,0,0},{11124,0,0},{11838,0,0},{19808,0,0},{14379,0,0},{8999,0,0},{5190,0,0},{20003,0,0},{20110,0,0},{564,0,0},{19390,0,0},{30753,0,0},{29866,0,0},{25577,0,0},{27082,0,0},{5818,0,0},{26597,0,0},{29023,0,0},{3890,0,0},{13158,0,0},{2159,0,0},{21593,0,0},{8121,0,0},{16305,0,0},{27441,0,0},{20846,0,0},{939,0,0},{8323,0,0},{18432,0,0},{19819,0,0},{10166,0,0},{32421,0,0},{6167,0,0},{16883,0,0},{12026,0,0},{129,0,0},{30916,0,0},{25960,0,0},{2915,0,0},{20777,0,0},{9825,0,0},{2575,0,0},{28727,0,0},{6299,0,0},{9094,0,0},{30830,0,0},{21227,0,0},{18756,0,0},{24701,0,0},{18681,0,0},{28219,0,0},{26306,0,0},{30454,0,0},{238,0,0},{31610,0,0},{10734,0,0},{19964,0,0},{30334,0,0},{5670,0,0},{9754,0,0},{14888,0,0},{16429,0,0},{32191,0,0},{21399,0,0},{28181,0,0},{13179,0,0},{10713,0,0},{9083,0,0},{20243,0,0},{14020,0,0},{25713,0,0},{160,0,0},{544,0,0},{27237,0,0},{24189,0,0},{25072,0,0},{17684,0,0},{27936,0,0},{29382,0,0},{20960,0,0},{26651,0,0},{16322,0,0},{2810,0,0},{3899,0,0},{31592,0,0},{3074,0,0},{23293,0,0},{11041,0,0},{1320,0,0},{21165,0,0},{26241,0,0},{18511,0,0},{21429,0,0},{17664,0,0},{1238,0,0},{24481,0,0},{16397,0,0},{19797,0,0},{22275,0,0},{11732,0,0},{29826,0,0},{2819,0,0},{25621,0,0},{11921,0,0},{2995,0,0},{17791,0,0},{20407,0,0},{18599,0,0},{7098,0,0},{6855,0,0},{24323,0,0},{3993,0,0},{423,0,0},{27904,0,0},{16280,0,0},{15960,0,0},{302,0,0},{21341,0,0},{17645,0,0},{20305,0,0},{3228,0,0},{4676,0,0},{4069,0,0},{21930,0,0},{18703,0,0},{24236,0,0},{21667,0,0},{31689,0,0},{8935,0,0},{28874,0,0},{12959,0,0},{19223,0,0},{1656,0,0},{10732,0,0},{21241,0,0},{8451,0,0},{4353,0,0},{20901,0,0},{16654,0,0},{30025,0,0},{19938,0,0},{11818,0,0},{12618,0,0},{21876,0,0},{21513,0,0},{31740,0,0},{10813,0,0},{14753,0,0},{22446,0,0},{2247,0,0},{17392,0,0},{5767,0,0},{1088,0,0},{30090,0,0},{29049,0,0},{20660,0,0},{12959,0,0},{25593,0,0},{2253,0,0},{29977,0,0},{20363,0,0},{4896,0,0},{31958,0,0},{23241,0,0},{1629,0,0},{12104,0,0},{32197,0,0},{4606,0,0},{1012,0,0},{22814,0,0},{29610,0,0},{17501,0,0},{26099,0,0},{10258,0,0},{1857,0,0},{27259,0,0},{10794,0,0},{11262,0,0},{11535,0,0},{31391,0,0},{12881,0,0},{12808,0,0},{26286,0,0},{29898,0,0},{12284,0,0},{20681,0,0},{11878,0,0},{28660,0,0},{3275,0,0},{32687,0,0},{16637,0,0},{3225,0,0},{8929,0,0},{15775,0,0},{14799,0,0},{28788,0,0},{22936,0,0},{2783,0,0},{13601,0,0},{12171,0,0},{31347,0,0},{14900,0,0},{27826,0,0},{18027,0,0},{21077,0,0},{23879,0,0},{659,0,0},{2485,0,0},{29424,0,0},{20557,0,0},{28217,0,0},{11993,0,0},{10367,0,0},{10471,0,0},{16337,0,0},{21026,0,0},{30648,0,0},{3143,0,0},{11731,0,0},{7667,0,0},{14332,0,0},{12437,0,0},{8410,0,0},{30544,0,0},{7634,0,0},{3473,0,0},{12723,0,0},{21407,0,0},{18835,0,0},{121,0,0},{19891,0,0},{7088,0,0},{11879,0,0},{26413,0,0},{30030,0,0},{16380,0,0},{25967,0,0},{30353,0,0},{18662,0,0},{25130,0,0},{16708,0,0},{20531,0,0},{22497,0,0},{14296,0,0},{13729,0,0},{6958,0,0},{26110,0,0},{2711,0,0},{26460,0,0},{9294,0,0},{6889,0,0},{31031,0,0},{30875,0,0},{18804,0,0},{20493,0,0},{24134,0,0},{25924,0,0},{13372,0,0},{28841,0,0},{32723,0,0},{949,0,0},{10206,0,0},{8230,0,0},{27767,0,0},{32182,0,0},{26194,0,0},{6824,0,0},{10647,0,0},{21931,0,0},{28856,0,0},{995,0,0},{5859,0,0},{19471,0,0},{9974,0,0},{6192,0,0},{11042,0,0},{14621,0,0},{2723,0,0},{29663,0,0},{28210,0,0},{11984,0,0},{10532,0,0},{25807,0,0},{21578,0,0},{30478,0,0},{28948,0,0},{31293,0,0},{24195,0,0},{16928,0,0},{30442,0,0},{18138,0,0},{9367,0,0},{6502,0,0},{27861,0,0},{2336,0,0},{11240,0,0},{27209,0,0},{20971,0,0},{11749,0,0},{12228,0,0},{15728,0,0},{7299,0,0},{24881,0,0},{16103,0,0},{28215,0,0},{25567,0,0},{8525,0,0},{21057,0,0},{30301,0,0},{19727,0,0},{2076,0,0},{16634,0,0},{8700,0,0},{16145,0,0},{16046,0,0},{13748,0,0},{16319,0,0},{8765,0,0},{20243,0,0},{2320,0,0},{8527,0,0},{12001,0,0},{18541,0,0},{9587,0,0},{14,0,0},{3880,0,0},{26953,0,0},{22538,0,0},{6664,0,0},{22592,0,0},{17456,0,0},{13067,0,0},{6951,0,0},{7867,0,0},{4728,0,0},{25918,0,0},{9894,0,0},{10806,0,0},{10592,0,0},{10941,0,0},{5319,0,0},{3129,0,0},{17757,0,0},{15096,0,0},{14537,0,0},{7775,0,0},{8110,0,0},{22523,0,0},{17172,0,0},{11191,0,0},{566,0,0},{25332,0,0},{5048,0,0},{18793,0,0},{19851,0,0},{6639,0,0},{4373,0,0},{8861,0,0},{9547,0,0},{25317,0,0},{22235,0,0},{15256,0,0},{13999,0,0},{18421,0,0},{20790,0,0},{28712,0,0},{19810,0,0},{2289,0,0},{6210,0,0},{12611,0,0},{10899,0,0},{26140,0,0},{8133,0,0},{17899,0,0},{21065,0,0},{2098,0,0},{3869,0,0},{4948,0,0},{17142,0,0},{10665,0,0},{21879,0,0},{12361,0,0},{19280,0,0},{25911,0,0},{20034,0,0},{18380,0,0},{29276,0,0},{19860,0,0},{2532,0,0},{3837,0,0},{9675,0,0},{12929,0,0},{3755,0,0},{21053,0,0},{8842,0,0},{14089,0,0},{9734,0,0},{23954,0,0},{19349,0,0},{7431,0,0},{2549,0,0},{17485,0,0},{25356,0,0},{27112,0,0},{1726,0,0},{19435,0,0},{22920,0,0},{18610,0,0},{25826,0,0},{32314,0,0},{10159,0,0},{19781,0,0},{12111,0,0},{9917,0,0},{26118,0,0},{31970,0,0},{10711,0,0},{16208,0,0},{5895,0,0},{16361,0,0},{3041,0,0},{4111,0,0},{22388,0,0},{8423,0,0},{21342,0,0},{1653,0,0},{26858,0,0},{31951,0,0},{17407,0,0},{1985,0,0},{19129,0,0},{2184,0,0},{26277,0,0},{17054,0,0},{21747,0,0},{20392,0,0},{7450,0,0},{17410,0,0},{2499,0,0},{4224,0,0},{7678,0,0},{21335,0,0},{4352,0,0},{6488,0,0},{27908,0,0},{23001,0,0},{4610,0,0},{2811,0,0},{9054,0,0},{22847,0,0},{24501,0,0},{9335,0,0},{7285,0,0},{13725,0,0},{10987,0,0},{31774,0,0},{23262,0,0},{22153,0,0},{12023,0,0},{18896,0,0},{14729,0,0},{25469,0,0},{3191,0,0},{9853,0,0},{15676,0,0},{8060,0,0},{18033,0,0},{25829,0,0},{6720,0,0},{10232,0,0},{5538,0,0},{26530,0,0},{16987,0,0},{6900,0,0},{1554,0,0},{6249,0,0},{3838,0,0},{26726,0,0},{4844,0,0},{25741,0,0},{23486,0,0},{21215,0,0},{13453,0,0},{25284,0,0},{9480,0,0},{25453,0,0},{5339,0,0},{1582,0,0},{32529,0,0},{21697,0,0},{24024,0,0},{659,0,0},{30989,0,0},{14733,0,0},{22135,0,0},{17901,0,0},{16545,0,0},{25136,0,0},{16814,0,0},{11046,0,0},{6554,0,0},{17813,0,0},{13260,0,0},{18978,0,0},{32223,0,0},{29016,0,0},{21005,0,0},{2304,0,0},{31140,0,0},{17707,0,0},{12395,0,0},{21149,0,0},{6113,0,0},{32121,0,0},{16824,0,0},{5722,0,0},{29443,0,0},{20809,0,0},{3562,0,0},{29984,0,0},{15841,0,0},{10084,0,0},{8886,0,0},{16289,0,0},{22769,0,0},{9914,0,0},{29280,0,0},{10720,0,0},{18364,0,0},{9730,0,0},{5329,0,0},{22515,0,0},{6799,0,0},{16033,0,0},{7914,0,0},{10247,0,0},{8308,0,0},{1741,0,0},{1048,0,0},{23974,0,0},{30048,0,0},{14066,0,0},{13864,0,0},{4661,0,0},{16558,0,0},{15956,0,0},{30557,0,0},{3777,0,0},{14284,0,0},{2807,0,0},{4800,0,0},{29435,0,0},{14645,0,0},{2236,0,0},{28344,0,0},{19840,0,0},{5023,0,0},{7116,0,0},{11738,0,0},{2398,0,0},{19829,0,0},{6713,0,0},{20994,0,0},{21716,0,0},{135,0,0},{2275,0,0},{5539,0,0},{25946,0,0},{7681,0,0},{8089,0,0},{28507,0,0},{15585,0,0},{11929,0,0},{22657,0,0},{29643,0,0},{21596,0,0},{25357,0,0},{3770,0,0},{2469,0,0},{20351,0,0},{2253,0,0},{28735,0,0},{9222,0,0},{7623,0,0},{14068,0,0},{18191,0,0},{30471,0,0},{11450,0,0},{18301,0,0},{23947,0,0},{23183,0,0},{3952,0,0},{28852,0,0},{543,0,0},{20331,0,0},{16210,0,0},{4842,0,0},{28196,0,0},{23200,0,0},{23074,0,0},{3693,0,0},{5125,0,0},{11007,0,0},{316,0,0},{13752,0,0},{6305,0,0},{15611,0,0},{15899,0,0},{12262,0,0},{31729,0,0},{28856,0,0},{4126,0,0},{24429,0,0},{13547,0,0},{18020,0,0},{1932,0,0},{8456,0,0},{17574,0,0},{13514,0,0},{4567,0,0},{30453,0,0},{1214,0,0},{20004,0,0},{23325,0,0},{29793,0,0},{13562,0,0},{10033,0,0},{26868,0,0},{32033,0,0},{3116,0,0},{13448,0,0},{21095,0,0},{11682,0,0},{20569,0,0},{4652,0,0},{14652,0,0},{32547,0,0},{14874,0,0},{26976,0,0},{26745,0,0},{31777,0,0},{10050,0,0},{26813,0,0},{15398,0,0},{6419,0,0},{24769,0,0},{641,0,0},{13907,0,0},{1368,0,0},{30665,0,0},{25898,0,0},{25949,0,0},{2158,0,0},{32303,0,0},{25156,0,0},{32622,0,0},{16228,0,0},{7699,0,0},{14207,0,0},{22339,0,0},{20114,0,0},{21699,0,0},{28164,0,0},{3634,0,0},{23431,0,0},{21725,0,0},{17417,0,0},{10091,0,0},{25411,0,0},{21428,0,0},{21667,0,0},{24702,0,0},{16551,0,0},{17909,0,0},{29148,0,0},{29469,0,0},{30505,0,0},{20363,0,0},{25862,0,0},{9251,0,0},{5580,0,0},{27327,0,0},{2383,0,0},{17366,0,0},{18000,0,0},{2724,0,0},{29845,0,0},{873,0,0},{23717,0,0},{15538,0,0},{8827,0,0},{17350,0,0},{31398,0,0},{3505,0,0},{21948,0,0},{16778,0,0},{7172,0,0},{13785,0,0},{9151,0,0},{16976,0,0},{7808,0,0},{20535,0,0},{24172,0,0},{10034,0,0},{6750,0,0},{8530,0,0},{20543,0,0},{2189,0,0},{7958,0,0},{12559,0,0},{32410,0,0},{16133,0,0},{10316,0,0},{15314,0,0},{26208,0,0},{32201,0,0},{24322,0,0},{16102,0,0},{26303,0,0},{25112,0,0},{31501,0,0},{9247,0,0},{20045,0,0},{7173,0,0},{22725,0,0},{20669,0,0},{15959,0,0},{5239,0,0},{5889,0,0},{7060,0,0},{22645,0,0},{13427,0,0},{20803,0,0},{28266,0,0},{27234,0,0},{12702,0,0},{18991,0,0},{5793,0,0},{3083,0,0},{1021,0,0},{6722,0,0},{2326,0,0},{25574,0,0},{26880,0,0},{14016,0,0},{7496,0,0},{1413,0,0},{6079,0,0},{25838,0,0},{957,0,0},{7787,0,0},{2691,0,0},{28034,0,0},{31649,0,0},{25886,0,0},{392,0,0},{9304,0,0},{2993,0,0},{32382,0,0},{8961,0,0},{6246,0,0},{16983,0,0},{19796,0,0},{23645,0,0},{32754,0,0},{16662,0,0},{24622,0,0},{26825,0,0},{13570,0,0},{5929,0,0},{29035,0,0},{8438,0,0},{22037,0,0},{12135,0,0},{11666,0,0},{30748,0,0},{24336,0,0},{21866,0,0},{13288,0,0},{19007,0,0},{20091,0,0},{5616,0,0},{1345,0,0},{24497,0,0},{10989,0,0},{32385,0,0},{21782,0,0},{18904,0,0},{31941,0,0},{83,0,0},{28888,0,0},{32049,0,0},{4123,0,0},{31338,0,0},{12676,0,0},{19605,0,0},{4855,0,0},{12035,0,0},{11128,0,0},{10683,0,0},{25536,0,0},{10291,0,0},{4229,0,0},{20223,0,0},{9207,0,0},{20428,0,0},{30789,0,0},{13921,0,0},{25381,0,0},{16000,0,0},{686,0,0},{465,0,0},{30225,0,0},{1609,0,0},{2280,0,0},{14506,0,0},{20023,0,0},{31752,0,0},{20572,0,0},{32380,0,0},{25974,0,0},{17516,0,0},{29710,0,0},{9998,0,0},{4617,0,0},{10261,0,0},{30764,0,0},{19363,0,0},{22200,0,0},{29433,0,0},{15335,0,0},{17789,0,0},{847,0,0},{25351,0,0},{15745,0,0},{12704,0,0},{14672,0,0},{27147,0,0},{25767,0,0},{25048,0,0},{10469,0,0},{18130,0,0},{18178,0,0},{24317,0,0},{6680,0,0},{14734,0,0},{6921,0,0},{24694,0,0},{5702,0,0},{22395,0,0},{19737,0,0},{23804,0,0},{17873,0,0},{16835,0,0},{27335,0,0},{6304,0,0},{22038,0,0},{17312,0,0},{22645,0,0},{21520,0,0},{31647,0,0},{7104,0,0},{1315,0,0},{278,0,0},{25753,0,0},{29933,0,0},{4232,0,0},{8289,0,0},{12168,0,0},{20973,0,0},{5985,0,0},{11400,0,0},{14905,0,0},{28839,0,0},{6666,0,0},{13900,0,0},{23800,0,0},{26760,0,0},{12619,0,0},{5662,0,0},{26116,0,0},{2085,0,0},{1396,0,0},{22241,0,0},{26944,0,0},{13858,0,0},{15276,0,0},{15856,0,0},{14379,0,0},{22866,0,0},{19846,0,0},{5219,0,0},{5650,0,0},{3103,0,0},{32469,0,0},{5518,0,0},{31877,0,0},{7981,0,0},{26050,0,0},{9931,0,0},{1031,0,0},{12090,0,0},{14619,0,0},{15482,0,0},{17673,0,0},{21065,0,0},{22766,0,0},{4165,0,0},{17690,0,0},{8191,0,0},{17751,0,0},{3241,0,0},{17496,0,0},{6477,0,0},{30614,0,0},{4529,0,0},{32554,0,0},{13135,0,0},{20836,0,0},{30469,0,0},{14385,0,0},{2420,0,0},{5768,0,0},{28452,0,0},{7803,0,0},{31456,0,0},{9381,0,0},{12270,0,0},{25594,0,0},{14094,0,0},{23894,0,0},{1125,0,0},{6197,0,0},{32186,0,0},{30332,0,0},{11188,0,0},{6974,0,0},{5630,0,0},{9431,0,0},{10609,0,0},{15588,0,0},{16571,0,0},{21716,0,0},{27423,0,0},{23593,0,0},{10810,0,0},{26022,0,0},{26359,0,0},{6903,0,0},{7955,0,0},{6808,0,0},{6120,0,0},{31246,0,0},{2126,0,0},{13986,0,0},{31452,0,0},{28993,0,0},{29385,0,0},{30266,0,0},{28989,0,0},{22498,0,0},{9689,0,0},{23404,0,0},{11447,0,0},{12667,0,0},{3380,0,0},{45,0,0},{2112,0,0},{12990,0,0},{31247,0,0},{25325,0,0},{29270,0,0},{4799,0,0},{32643,0,0},{24939,0,0},{19592,0,0},{31841,0,0},{28213,0,0},{21965,0,0},{25656,0,0},{13326,0,0},{13110,0,0},{2544,0,0},{26783,0,0},{17836,0,0},{7720,0,0},{29949,0,0},{530,0,0},{20172,0,0},{21155,0,0},{30525,0,0},{28291,0,0},{14628,0,0},{26839,0,0},{2094,0,0},{18250,0,0},{31039,0,0},{370,0,0},{2774,0,0},{21542,0,0},{9587,0,0},{20676,0,0},{15447,0,0},{3966,0,0},{30996,0,0},{25888,0,0},{28868,0,0},{16365,0,0},{6119,0,0},{11398,0,0},{4659,0,0},{19198,0,0},{9689,0,0},{32128,0,0},{5651,0,0},{9524,0,0},{1777,0,0},{10058,0,0},{23744,0,0},{846,0,0},{23428,0,0},{19765,0,0},{12117,0,0},{12488,0,0},{3240,0,0},{4429,0,0},{20418,0,0},{12197,0,0},{31978,0,0},{21050,0,0},{20254,0,0},{1388,0,0},{12612,0,0},{100,0,0},{7742,0,0},{22897,0,0},{1609,0,0},{20059,0,0},{3206,0,0},{18517,0,0},{17827,0,0},{16501,0,0},{10495,0,0},{4304,0,0},{12223,0,0},{24505,0,0},{14762,0,0},{32174,0,0},{19911,0,0},{5115,0,0},{15636,0,0},{12568,0,0},{8145,0,0},{26953,0,0},{10795,0,0},{13589,0,0},{31574,0,0},{17542,0,0},{25168,0,0},{30033,0,0},{11749,0,0},{19285,0,0},{2477,0,0},{1564,0,0},{14360,0,0},{825,0,0},{14793,0,0},{23733,0,0},{13512,0,0},{27642,0,0},{16985,0,0},{23753,0,0},{16509,0,0},{6474,0,0},{27738,0,0},{24375,0,0},{29992,0,0},{4008,0,0},{29532,0,0},{5654,0,0},{19989,0,0},{26757,0,0},{10529,0,0},{29177,0,0},{2075,0,0},{421,0,0},{30566,0,0},{27761,0,0},{21014,0,0},{15305,0,0},{13313,0,0},{23508,0,0},{24983,0,0},{3211,0,0},{31532,0,0},{13373,0,0},{16345,0,0},{26505,0,0},{1057,0,0},{22996,0,0},{25335,0,0},{17093,0,0},{9191,0,0},{26704,0,0},{26461,0,0},{14924,0,0},{29291,0,0},{5050,0,0},{32124,0,0},{5910,0,0},{17874,0,0},{1651,0,0},{24515,0,0},{15662,0,0},{30734,0,0},{24696,0,0},{25802,0,0},{17682,0,0},{10927,0,0},{15333,0,0},{464,0,0},{17501,0,0},{31996,0,0},{23224,0,0},{20839,0,0},{2467,0,0},{26691,0,0},{25048,0,0},{29294,0,0},{20381,0,0},{13933,0,0},{17750,0,0},{21312,0,0},{11142,0,0},{18133,0,0},{18930,0,0},{15659,0,0},{15044,0,0},{5467,0,0},{16353,0,0},{13348,0,0},{21451,0,0},{14260,0,0},{23245,0,0},{32440,0,0},{15935,0,0},{17668,0,0},{19230,0,0},{27206,0,0},{13912,0,0},{23470,0,0},{31864,0,0},{8044,0,0},{16267,0,0},{14698,0,0},{7556,0,0},{6847,0,0},{2663,0,0},{6553,0,0},{21748,0,0},{7615,0,0},{29117,0,0},{19926,0,0},{18369,0,0},{11274,0,0},{21251,0,0},{17614,0,0},{21687,0,0},{26831,0,0},{17914,0,0},{29521,0,0},{10548,0,0},{26758,0,0},{30607,0,0},{21417,0,0},{4909,0,0},{19166,0,0},{11263,0,0},{28458,0,0},{13425,0,0},{12535,0,0},{11327,0,0},{9738,0,0},{31538,0,0},{25554,0,0},{8859,0,0},{10611,0,0},{961,0,0},{16134,0,0},{10909,0,0},{23511,0,0},{18329,0,0},{13236,0,0},{6192,0,0},{2948,0,0},{15775,0,0},{30652,0,0},{14853,0,0},{15224,0,0},{20392,0,0},{13617,0,0},{6966,0,0},{28278,0,0},{18748,0,0},{19979,0,0},{2090,0,0},{10329,0,0},{9114,0,0},{2076,0,0},{23224,0,0},{6569,0,0},{21243,0,0},{13638,0,0},{20879,0,0},{10604,0,0},{31003,0,0},{11242,0,0},{30421,0,0},{20798,0,0},{8438,0,0},{9123,0,0},{23054,0,0},{32676,0,0},{26575,0,0},{18997,0,0},{8512,0,0},{29854,0,0},{14199,0,0},{9408,0,0},{13652,0,0},{19579,0,0},{30156,0,0},{4410,0,0},{3520,0,0},{11505,0,0},{19840,0,0},{31771,0,0},{24419,0,0},{18541,0,0},{29724,0,0},{7770,0,0},{12976,0,0},{11176,0,0},{4420,0,0},{22425,0,0},{9487,0,0},{2427,0,0},{11068,0,0},{30877,0,0},{22912,0,0},{30964,0,0},{15531,0,0},{4608,0,0},{23682,0,0},{22953,0,0},{22431,0,0},{6954,0,0},{32563,0,0},{21068,0,0},{31186,0,0},{1405,0,0},{28088,0,0},{7552,0,0},{30252,0,0},{4048,0,0},{1247,0,0},{6379,0,0},{6024,0,0},{28191,0,0},{11011,0,0},{19085,0,0},{24763,0,0},{6528,0,0},{12337,0,0},{20560,0,0},{3538,0,0},{23641,0,0},{31112,0,0},{28128,0,0},{15004,0,0},{28369,0,0},{31718,0,0},{11452,0,0},{21097,0,0},{14212,0,0},{18881,0,0},{17038,0,0},{11536,0,0},{1147,0,0},{14418,0,0},{12728,0,0},{32055,0,0},{20571,0,0},{24569,0,0},{22575,0,0},{29646,0,0},{26588,0,0},{31709,0,0},{24716,0,0},{15581,0,0},{893,0,0},{27859,0,0},{18784,0,0},{14720,0,0},{10615,0,0},{25473,0,0},{30408,0,0},{6959,0,0},{27631,0,0},{30147,0,0},{578,0,0},{17475,0,0},{22383,0,0},{9037,0,0},{15551,0,0},{4534,0,0},{9623,0,0},{3474,0,0},{5882,0,0},{29227,0,0},{2064,0,0},{26341,0,0},{25607,0,0},{28206,0,0},{8130,0,0},{23774,0,0},{10799,0,0},{1468,0,0},{29767,0,0},{512,0,0},{30203,0,0},{1798,0,0},{32671,0,0},{31384,0,0},{25487,0,0},{17010,0,0},{8741,0,0},{28904,0,0},{21049,0,0},{16355,0,0},{4801,0,0},{5253,0,0},{30282,0,0},{22842,0,0},{8032,0,0},{10494,0,0},{15653,0,0},{24093,0,0},{20897,0,0},{26558,0,0},{14229,0,0},{9463,0,0},{19409,0,0},{14644,0,0},{32356,0,0},{11583,0,0},{29210,0,0},{2353,0,0},{17705,0,0},{14078,0,0},{13303,0,0},{14993,0,0},{3937,0,0},{29579,0,0},{2539,0,0},{32285,0,0},{15297,0,0},{13209,0,0},{31603,0,0},{4272,0,0},{22987,0,0},{13940,0,0},{16697,0,0},{9369,0,0},{32160,0,0},{32392,0,0},{22410,0,0},{31297,0,0},{1557,0,0},{20259,0,0},{5386,0,0},{27662,0,0},{2312,0,0},{14204,0,0},{6567,0,0},{29062,0,0},{23029,0,0},{20211,0,0},{10699,0,0},{23992,0,0},{24260,0,0},{1690,0,0},{18902,0,0},{23767,0,0},{9957,0,0},{13301,0,0},{11723,0,0},{29993,0,0},{30879,0,0},{14590,0,0},{20809,0,0},{3871,0,0},{18597,0,0},{28012,0,0},{19390,0,0},{18630,0,0},{20459,0,0},{11573,0,0},{13527,0,0},{6238,0,0},{13239,0,0},{12370,0,0},{11579,0,0},{583,0,0},{29691,0,0},{4034,0,0},{24440,0,0},{26149,0,0},{5090,0,0},{7121,0,0},{3389,0,0},{10044,0,0},{12457,0,0},{26522,0,0},{31947,0,0},{13340,0,0},{31408,0,0},{11723,0,0},{23206,0,0},{12675,0,0},{17617,0,0},{29352,0,0},{25488,0,0},{19583,0,0},{7664,0,0},{1875,0,0},{27319,0,0},{30675,0,0},{10451,0,0},{21066,0,0},{4142,0,0},{6300,0,0},{9780,0,0},{305,0,0},{15258,0,0},{26164,0,0},{25877,0,0},{2002,0,0},{12078,0,0},{343,0,0},{3412,0,0},{4194,0,0},{18137,0,0},{1668,0,0},{30847,0,0},{16645,0,0},{14269,0,0},{8102,0,0},{3305,0,0},{31381,0,0},{25572,0,0},{22772,0,0},{20222,0,0},{29855,0,0},{5678,0,0},{15638,0,0},{7379,0,0},{23215,0,0},{14990,0,0},{31881,0,0},{18434,0,0},{20174,0,0},{26230,0,0},{9284,0,0},{436,0,0},{30024,0,0},{17808,0,0},{10140,0,0},{19711,0,0},{28083,0,0},{16047,0,0},{16741,0,0},{27507,0,0},{23852,0,0},{25861,0,0},{28762,0,0},{30703,0,0},{28132,0,0},{2454,0,0},{4799,0,0},{9145,0,0},{26588,0,0},{236,0,0},{25924,0,0},{18894,0,0},{18156,0,0},{28941,0,0},{26925,0,0},{19575,0,0},{29194,0,0},{15274,0,0},{30128,0,0},{28957,0,0},{30665,0,0},{22681,0,0},{30878,0,0},{11870,0,0},{29728,0,0},{13446,0,0},{10822,0,0},{8289,0,0},{877,0,0},{26597,0,0},{14487,0,0},{5990,0,0},{26297,0,0},{23082,0,0},{11652,0,0},{29857,0,0},{15678,0,0},{9533,0,0},{5293,0,0},{18760,0,0},{30502,0,0},{19752,0,0},{9275,0,0},{27627,0,0},{26006,0,0},{8211,0,0},{27915,0,0},{30724,0,0},{3051,0,0},{21107,0,0},{22032,0,0},{27599,0,0},{5700,0,0},{11134,0,0},{26354,0,0},{22619,0,0},{6464,0,0},{21986,0,0},{9723,0,0},{22497,0,0},{32521,0,0},{10422,0,0},{3380,0,0},{15958,0,0},{17809,0,0},{31921,0,0},{23243,0,0},{14396,0,0},{29211,0,0},{24986,0,0},{16568,0,0},{19389,0,0},{24062,0,0},{18431,0,0},{14240,0,0}};
	
	auto start = high_resolution_clock::now(); 
	for(int i=0;i<2000;i++)
	{
		//cout<<"INSERT  :"<<arr[i][0]<<" "<<arr[i][1]<<"  "<<arr[i][2]<<endl;
	root = insert(root,arr[i][0],arr[i][1],arr[i][2]);
	//display(root);
	}
	auto stop = high_resolution_clock::now(); 

	auto duration = duration_cast<microseconds>(stop - start); 

	cout << "Time taken by B epsilon Tree: "
         << duration.count() << " microseconds" << endl; 
	//if user want to pass key value and operation ,comment above code and uncomment 
   /*
	int n;
	cout<<"Enter total no. of nodes  : ";
	cin>>n;
	node *root = NULL;
	cout<<"OPCODE:: INSERT:0 UPDATE:1 DELETE:2"<<endl;
	for(int i=0;i<n;i++)
	{
	int key, value,opcode;
	cout<<"Enter key value Opcode:";
	cin>>key;

	cin>>value;
	cin>>opcode;
	root = insert(root,key,value,opcode);
	display(root);
	}*/
	int key;
	cout<<"SEARCH :"<<endl;
	for(int i=0;i<5;i++)
	{
		cin>>key;
		cout<<"    ";
		int value = searchKey(root,key);
		if(value ==-1)
		{
			cout<<"Given key is not present"<<endl;
		}else
		{
			cout<<"value for given key :"<<value<<endl;
		}

		cout<<endl;

	}


}